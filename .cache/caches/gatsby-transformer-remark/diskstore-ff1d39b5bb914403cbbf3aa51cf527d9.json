{"expireTime":9007200840892404000,"key":"transformer-remark-markdown-html-ast-25148eb2ebb4a4a339d1707d16f334e5--","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Javascript 运行机制","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":16,"offset":15}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":16,"offset":15}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"一、为什么JavaScript是单线程？","position":{"start":{"line":3,"column":4,"offset":20},"end":{"line":3,"column":24,"offset":40}}}],"position":{"start":{"line":3,"column":1,"offset":17},"end":{"line":3,"column":24,"offset":40}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JavaScript的单线程，与它的用途有关，作为浏览器脚本，JavaScript的主要用途是与用户互动，以及操作DOM。这就决定了它只能是单线程，否则会带来很复杂的问题，比如，假定js同时有两个线程，一个线程在给某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器该以哪个线程为准？  ","position":{"start":{"line":5,"column":1,"offset":42},"end":{"line":5,"column":150,"offset":191}}}],"position":{"start":{"line":5,"column":1,"offset":42},"end":{"line":5,"column":150,"offset":191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以为了避免复杂性，从一诞生，JavaScript就是单线程，这已经是核心特征，将来也不会改变。  ","position":{"start":{"line":7,"column":1,"offset":193},"end":{"line":7,"column":51,"offset":243}}}],"position":{"start":{"line":7,"column":1,"offset":193},"end":{"line":7,"column":51,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为了利用多核CPU的计算能力，HTML5 提出Web Worker 标准，准许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以这个标准并没有改变JavaScript单线程的本质。  ","position":{"start":{"line":9,"column":1,"offset":245},"end":{"line":9,"column":112,"offset":356}}}],"position":{"start":{"line":9,"column":1,"offset":245},"end":{"line":9,"column":112,"offset":356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"二、任务队列","position":{"start":{"line":11,"column":4,"offset":361},"end":{"line":11,"column":10,"offset":367}}}],"position":{"start":{"line":11,"column":1,"offset":358},"end":{"line":11,"column":10,"offset":367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等待。  ","position":{"start":{"line":13,"column":1,"offset":369},"end":{"line":13,"column":64,"offset":432}}}],"position":{"start":{"line":13,"column":1,"offset":369},"end":{"line":13,"column":64,"offset":432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果排队是因为计算量大，CPU忙不过来，也就算了，但很多时候CPU是闲着的，因为IO设备很慢（比如Ajax操作从网络读取数据），不得不等着结果出来再往下执行。  ","position":{"start":{"line":15,"column":1,"offset":434},"end":{"line":15,"column":82,"offset":515}}}],"position":{"start":{"line":15,"column":1,"offset":434},"end":{"line":15,"column":82,"offset":515}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JavaScript的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回头，把挂起的任务继续执行下去。  ","position":{"start":{"line":17,"column":1,"offset":517},"end":{"line":17,"column":88,"offset":604}}}],"position":{"start":{"line":17,"column":1,"offset":517},"end":{"line":17,"column":88,"offset":604}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"于是，所有任务可以分为两种，一种是同步任务（synchronize），另一种任务是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有一个任务执行完毕后，才能执行后一个任务；异步任务指的是，不进入主线程、而是进入“任务队列”（task queue）的任务，只有任务队列通知主线程，某个异步可以执行了，该任务才会进入主线程执行。具体来说，异步执行的运行机制如下。","position":{"start":{"line":19,"column":1,"offset":606},"end":{"line":19,"column":197,"offset":802}}}],"position":{"start":{"line":19,"column":1,"offset":606},"end":{"line":19,"column":197,"offset":802}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(1) 所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。  ","position":{"start":{"line":21,"column":2,"offset":805},"end":{"line":21,"column":56,"offset":859}}}],"position":{"start":{"line":21,"column":2,"offset":805},"end":{"line":21,"column":56,"offset":859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(2) 主线程之外，还存在一个“任务队列”（task queue）。只要异步有了运行结果，就在“任务队列”之中放置一个事件。  ","position":{"start":{"line":23,"column":2,"offset":863},"end":{"line":23,"column":66,"offset":927}}}],"position":{"start":{"line":23,"column":2,"offset":863},"end":{"line":23,"column":66,"offset":927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(3) 一旦执行栈中所有的同步任务执行完毕，系统就会读取“任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。  ","position":{"start":{"line":25,"column":2,"offset":931},"end":{"line":25,"column":79,"offset":1008}}}],"position":{"start":{"line":25,"column":2,"offset":931},"end":{"line":25,"column":79,"offset":1008}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(4) 主线程不断重复上面的第三步。 ","position":{"start":{"line":27,"column":2,"offset":1012},"end":{"line":27,"column":21,"offset":1031}}}],"position":{"start":{"line":27,"column":2,"offset":1012},"end":{"line":27,"column":21,"offset":1031}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"主线程和任务队列的示意图","position":{"start":{"line":29,"column":2,"offset":1035},"end":{"line":29,"column":14,"offset":1047}}}],"position":{"start":{"line":29,"column":2,"offset":1035},"end":{"line":29,"column":14,"offset":1047}}},{"type":"text","value":"\n"},{"type":"raw","value":"<img src=\"https://gitee.com/caoguangyao/upic/raw/master/uPic/renwuduilie.jpg\" alt=\"任务队列\" style=\"zoom:76%;\" />","position":{"start":{"line":31,"column":2,"offset":1051},"end":{"line":31,"column":111,"offset":1160}}},{"type":"text","value":"\n"}],"position":{"start":{"line":21,"column":1,"offset":804},"end":{"line":31,"column":111,"offset":1160}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"三、事件和回调函数","position":{"start":{"line":33,"column":4,"offset":1165},"end":{"line":33,"column":13,"offset":1174}}}],"position":{"start":{"line":33,"column":1,"offset":1162},"end":{"line":33,"column":15,"offset":1176}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"“任务队列“是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在“任务队列”中添加一个事件，表示相关的异步任务可以进入“执行栈”了。主线程去取“任务队列”，就是读取里面有哪些事件。   ","position":{"start":{"line":35,"column":2,"offset":1179},"end":{"line":35,"column":104,"offset":1281}}}],"position":{"start":{"line":35,"column":2,"offset":1179},"end":{"line":35,"column":104,"offset":1281}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"任务队列总的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入任务队列，等待主线程读取。  ","position":{"start":{"line":37,"column":2,"offset":1285},"end":{"line":37,"column":87,"offset":1370}}}],"position":{"start":{"line":37,"column":2,"offset":1285},"end":{"line":37,"column":87,"offset":1370}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所谓“回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。","position":{"start":{"line":39,"column":2,"offset":1374},"end":{"line":39,"column":75,"offset":1447}}}],"position":{"start":{"line":39,"column":2,"offset":1374},"end":{"line":39,"column":75,"offset":1447}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"任务队列是一个先进先出的数据结构，排在前面的事件，优先被主线程读取，主线程的读取基本是自动的，只要执行栈一清空，任务队列 上第一位的事件就自动进入主线程。但是，由于存在后面提到的“定时器”功能，主线程首先要检查一下执行时间，某些时间只有到了规定的时间，才能返回主线程。  ","position":{"start":{"line":41,"column":2,"offset":1451},"end":{"line":41,"column":138,"offset":1587}}}],"position":{"start":{"line":41,"column":2,"offset":1451},"end":{"line":41,"column":138,"offset":1587}}},{"type":"text","value":"\n"}],"position":{"start":{"line":35,"column":1,"offset":1178},"end":{"line":41,"column":138,"offset":1587}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"四、Event Loop","position":{"start":{"line":43,"column":4,"offset":1592},"end":{"line":43,"column":16,"offset":1604}}}],"position":{"start":{"line":43,"column":1,"offset":1589},"end":{"line":43,"column":18,"offset":1606}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"主线程从“任务队列”中读取事件，这个过程是循环不断的，所以这个的这种运行机制又称作Event Loop（事件循环）。为了更好的理解请看下图  ","position":{"start":{"line":45,"column":2,"offset":1609},"end":{"line":45,"column":73,"offset":1680}}}],"position":{"start":{"line":45,"column":2,"offset":1609},"end":{"line":45,"column":73,"offset":1680}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png","alt":"Event Loop"},"children":[],"position":{"start":{"line":47,"column":3,"offset":1685},"end":{"line":47,"column":79,"offset":1761}}}],"position":{"start":{"line":47,"column":3,"offset":1685},"end":{"line":47,"column":79,"offset":1761}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上图中，主线程运行的时候，产生堆（heap）和栈（stack） ，栈中的代码调用各种外部API，它们在任务队列中 加入各种事件（click load done）。只要栈中的代码执行完毕，主线程就会读取 “任务队列”，依次执行那些事件所对应的回调函数。  ","position":{"start":{"line":49,"column":2,"offset":1765},"end":{"line":49,"column":129,"offset":1892}}}],"position":{"start":{"line":49,"column":2,"offset":1765},"end":{"line":49,"column":129,"offset":1892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"执行栈中的代码（同步任务），总是在读取“任务队列”（异步任务）之前执行。示例如下： ","position":{"start":{"line":51,"column":2,"offset":1896},"end":{"line":51,"column":44,"offset":1938}}}],"position":{"start":{"line":51,"column":2,"offset":1896},"end":{"line":51,"column":44,"offset":1938}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"var req = new XMLHttpRequest();\nreq.open('GET',url);\nreq.onload = function(){};\nreq.onerror = function(){};\nreq.send();\n"}],"position":{"start":{"line":53,"column":2,"offset":1942},"end":{"line":59,"column":5,"offset":2085}}}],"position":{"start":{"line":53,"column":2,"offset":1942},"end":{"line":59,"column":5,"offset":2085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取“任务队列”。所以，它与下面的写法等价。  ","position":{"start":{"line":61,"column":2,"offset":2089},"end":{"line":61,"column":90,"offset":2177}}}],"position":{"start":{"line":61,"column":2,"offset":2089},"end":{"line":61,"column":90,"offset":2177}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"var req = new XMLHttpRequest();\nreq.open('GET',url);\nreq.send();\nreq.onload = function(){};\nreq.onerror = function(){};\n"}],"position":{"start":{"line":63,"column":2,"offset":2181},"end":{"line":69,"column":5,"offset":2324}}}],"position":{"start":{"line":63,"column":2,"offset":2181},"end":{"line":69,"column":5,"offset":2324}}},{"type":"text","value":"\n"}],"position":{"start":{"line":45,"column":1,"offset":1608},"end":{"line":69,"column":5,"offset":2324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"也就是说，指定回调函数的部分（onload 和 onerror），在 send() 方法的前面或是后面无关紧要，因为它们属于执行栈的一部分，系统总是执行完它们，才会读取“任务队列”。  ","position":{"start":{"line":71,"column":2,"offset":2327},"end":{"line":71,"column":95,"offset":2420}}}],"position":{"start":{"line":71,"column":2,"offset":2327},"end":{"line":71,"column":95,"offset":2420}}},{"type":"text","value":"\n"}],"position":{"start":{"line":71,"column":1,"offset":2326},"end":{"line":71,"column":95,"offset":2420}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"五、定时器","position":{"start":{"line":73,"column":4,"offset":2425},"end":{"line":73,"column":9,"offset":2430}}}],"position":{"start":{"line":73,"column":1,"offset":2422},"end":{"line":73,"column":9,"offset":2430}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"除了放置异步任务的事件，“任务队列”还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫定时器（timer）功能，也就是定时执行的代码。  ","position":{"start":{"line":75,"column":2,"offset":2433},"end":{"line":75,"column":75,"offset":2506}}}],"position":{"start":{"line":75,"column":2,"offset":2433},"end":{"line":75,"column":75,"offset":2506}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"定时器功能主要由setTimeout() 和 setInterval() 这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码时一次性执行，后者则为反复执行。主要讨论 setTimeout()  ","position":{"start":{"line":77,"column":2,"offset":2510},"end":{"line":77,"column":108,"offset":2616}}}],"position":{"start":{"line":77,"column":2,"offset":2510},"end":{"line":77,"column":108,"offset":2616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"setTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。  ","position":{"start":{"line":79,"column":2,"offset":2620},"end":{"line":79,"column":45,"offset":2663}}}],"position":{"start":{"line":79,"column":2,"offset":2620},"end":{"line":79,"column":45,"offset":2663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"console.log(1);\nsetTimeout(function(){console.log(2);},1000);\nconsole.log(3);\n"}],"position":{"start":{"line":81,"column":2,"offset":2667},"end":{"line":85,"column":5,"offset":2766}}}],"position":{"start":{"line":81,"column":2,"offset":2667},"end":{"line":85,"column":5,"offset":2766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面代码的执行结果是1，3，2，因为setTimeout()将第二行推迟到1000毫秒之后执行。 ","position":{"start":{"line":87,"column":2,"offset":2770},"end":{"line":87,"column":51,"offset":2819}}}],"position":{"start":{"line":87,"column":2,"offset":2770},"end":{"line":87,"column":51,"offset":2819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"setTimeout(function(){console.log(1);}, 0);\nconsole.log(2);\n"}],"position":{"start":{"line":89,"column":2,"offset":2823},"end":{"line":92,"column":5,"offset":2903}}}],"position":{"start":{"line":89,"column":2,"offset":2823},"end":{"line":92,"column":5,"offset":2903}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行\"任务队列\"中的回调函数。 ","position":{"start":{"line":94,"column":2,"offset":2907},"end":{"line":94,"column":52,"offset":2957}}}],"position":{"start":{"line":94,"column":2,"offset":2907},"end":{"line":94,"column":52,"offset":2957}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"总之，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在\"任务队列\"的尾部添加一个事件，因此要等到同步任务和\"任务队列\"现有的事件都处理完，才会得到执行。  ","position":{"start":{"line":96,"column":2,"offset":2961},"end":{"line":96,"column":114,"offset":3073}}}],"position":{"start":{"line":96,"column":2,"offset":2961},"end":{"line":96,"column":114,"offset":3073}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。  ","position":{"start":{"line":98,"column":2,"offset":3077},"end":{"line":98,"column":188,"offset":3263}}}],"position":{"start":{"line":98,"column":2,"offset":3077},"end":{"line":98,"column":188,"offset":3263}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要注意的是，setTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。","position":{"start":{"line":100,"column":2,"offset":3267},"end":{"line":100,"column":127,"offset":3392}}}],"position":{"start":{"line":100,"column":2,"offset":3267},"end":{"line":100,"column":127,"offset":3392}}},{"type":"text","value":"\n"}],"position":{"start":{"line":75,"column":1,"offset":2432},"end":{"line":100,"column":127,"offset":3392}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":104,"column":1,"offset":3396}}}}